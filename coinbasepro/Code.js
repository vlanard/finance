// You need to create Coinbase Pro API keys to use this.. 
// You will store your API key, secret key, and passphrase in your Google Sheet, not in code.

// =======================================================
// CONFIGURATION
// =======================================================
const SHEET_PRICE_HISTORY = "prices";  //expected tab names in sheet
const SHEET_CONFIG = "conf";  

const FORMAT_DATE = "M/d/yyyy";  // tweak this for different locale representations
const FORMAT_CURRENCY_BLACK = "$#,##0.00;[Red]-$#,##0.00";
const VERBOSE = true;  //turn on/off logging
const BASE_CURRENCY = "USD";

const CONFIG_START_ROW = 2;
const CONFIG_VALUES_LOOKUP_RANGE = `${SHEET_CONFIG}!A${CONFIG_START_ROW}:B100`;
const CONFIG_VALUES_COLUMN = `${SHEET_CONFIG}!B`;

const COINBASE_CONFIG = {
  Pro: {
    API_HOST:'https://api.pro.coinbase.com',
    ACCOUNT_NAME : "Coinbase Pro",
    API_KEY_NAME : "Coinbase Pro API Key",  
    SECRET_KEY_NAME : "Coinbase Pro Secret Key",
    PASSPHRASE_NAME : "Coinbase Pro Passphrase",
  }
}

function _configGetOrSet(keyName,setValue=null){
  //look for a key in our config sheet, and return or set the corresponding value
  const ss = SpreadsheetApp.getActive();
  const configRows = ss.getRange(CONFIG_VALUES_LOOKUP_RANGE).getValues();
  for (let i=0;i<configRows.length;i++) {
    const row = configRows[i];
    const key = row[0];
    if (key === keyName){
      if (setValue){
        let cellAddress = CONFIG_VALUES_COLUMN + (CONFIG_START_ROW + i );
        ss.getRange(cellAddress).setValue(setValue);
        return setValue;
      } else {
        return row[1];
      }
    }
  }
}

// =======================================================
// COINBASE PRO
// =======================================================

function _readCoinbaseProCreds(){
  const apiKey =  _configGetOrSet(COINBASE_CONFIG.Pro.API_KEY_NAME);
  const secretKey =  _configGetOrSet(COINBASE_CONFIG.Pro.SECRET_KEY_NAME);
  const passphrase =  _configGetOrSet(COINBASE_CONFIG.Pro.PASSPHRASE_NAME);
  return {
    apiKey: apiKey,
    secretKey: secretKey,
    passphrase: passphrase
  };
}


function _fetchCoinbaseProTimestamp(){
  //official server time so our timestamped requests never drift
  const json = _callCoinbaseProAPI('/time',useCreds=false);
  return json.epoch;
}


function _callCoinbaseProAPI(requestPath,useCreds=true){
  let creds = _readCoinbaseProCreds();
  let params;
  if (useCreds && creds.secretKey && creds.apiKey && creds.passphrase){
    const timestamp = _fetchCoinbaseProTimestamp();
    const method = "GET"; //should be upper case
    const body = '';// omitted for GET requests 

    //courtesy of stack overflow, because the CoinbasePro examples assume node, not Google Apps Script
    var decodedMessage = Utilities.base64Decode(Utilities.base64Encode(timestamp + method + requestPath + body));
    var decodedsecret = Utilities.base64Decode(creds.secretKey);
    var signature = Utilities.base64Encode(Utilities.computeHmacSha256Signature(decodedMessage, decodedsecret));
     

    params = {
      'headers' : {
        'CB-ACCESS-KEY':creds.apiKey,// API key as a string
        'CB-ACCESS-SIGN':signature,// Message signature (see instructions below)
        'CB-ACCESS-TIMESTAMP':timestamp.toString(), // Timestamp for your request
        'CB-ACCESS-PASSPHRASE':creds.passphrase
      },
      'muteHttpExceptions':true //suppress throwing automatic error so we can customize our error handling to see root cause
    };
  }else {
    params = {};
  }
  /*
The CB-ACCESS-SIGN header is generated by creating a sha256 HMAC using the base64-decoded secret key on the prehash string timestamp + method + requestPath + body (where + represents string concatenation) and base64-encode the output. The timestamp value is the same as the CB-ACCESS-TIMESTAMP header.

    The CB-ACCESS-TIMESTAMP header MUST be number of seconds since Unix Epoch in UTC.
    The timestamp value is the same as the CB-ACCESS-TIMESTAMP header.
    The body is the request body string. It is omitted if there is no request body (typically for GET requests).
    The requestPath is the full path and query parameters of the URL, e.g.: /v2/exchange-rates?currency=USD
  */
  const response = UrlFetchApp.fetch(COINBASE_CONFIG.Pro.API_HOST + requestPath,params); //throws exception with details if error
  const statusCode = response.getResponseCode();
  const responseText = response.getContentText();
  if (statusCode !== 200){
    throw Error(`Coinbase API returned status ${statusCode}: ${responseText}`);
  }
  const json = JSON.parse(responseText); //convert to json so we can run code on this response
  return json;
}


function _getLatestMarketPrice(ticker){
// pass in a Coinbase Pro `productID` to lookup, e.g. 'BTC-USD', to return the latest market price from Coinbase Pro.
// see docs : https://docs.pro.coinbase.com/#get-product-ticker
/*{
  "trade_id": 4729088,
  "price": "333.99",
  "size": "0.193",
  "bid": "333.98",
  "ask": "333.99",
  "volume": "5957.11914015",
  "time": "2015-11-14T20:46:03.511254Z"
}*/
  
  const fn = "getLatestMarketPrice";
  const productID = ticker;
  const requestPath = `/products/${productID}/ticker`;
  if (VERBOSE){ Logger.log(`${fn} ${productID}`);}
  const json = _callCoinbaseProAPI(requestPath)
  if (!json){
    console.log(`No ${COINBASE_CONFIG.Pro.ACCOUNT_NAME} price data found for ${productID}`)
    return null;
  }
  const price = parseFloat(json.price);
  const time = new Date(json.time)
  return [price,time];  
}




// fetch current Coinbase Pro currencies held and their exchange rates
// see docs : https://docs.pro.coinbase.com/#list-accounts
function lookupListHeldAtCoinbasePro(){
  const fn = "lookupListHeldAtCoinbasePro";
  let counter = 1;
  if (VERBOSE){ Logger.log(`${fn} ${counter++} start`);}
  
  let requestPath = '/accounts';  
/* sample json output, per currency
{
    "id": "a1b2c3d4",
    "balance": "1.100",
    "holds": "0.100",
    "available": "1.00",
    "currency": "USD"
}    
*/
  const balances = {};
  const accountIDs = [];
  while (requestPath){
    // first read the names of the non-zero-balance currencys we have in Coinbase Pro
    const data = _callCoinbaseProAPI(requestPath)
    for (var i=0;i<data.length;i++) {
      const account = data[i];
      const balance = parseFloat(account.balance);
      if (balance === 0) continue;
      const currency = account.currency;
      accountIDs.push(account.id);
      balances[`${currency}`] = balance; 
    }
    //page through results while there are more pages
    if (VERBOSE){ Logger.log(`${fn} ${counter++} fetched accounts`);}
    requestPath = null;// no apparent paging
  }

  //now look up the current market prices and balances for each of those
  let totalBalance = 0;
  let date = new Date();
  const rows = [];
  for (let [currency, amount] of Object.entries(balances)){
    let localValue;
    if (currency === `${BASE_CURRENCY}`){ //don't look up 1-to-1 conversion for base currency
      localValue = parseFloat(amount);
    }else {
      const lookupCurrency = `${currency}-${BASE_CURRENCY}`;
      const [price,time] = _getLatestMarketPrice(lookupCurrency);
      if (!price) continue; //nothing to write to our sheet
      localValue = amount * price;
      rows.push([time, lookupCurrency, price, COINBASE_CONFIG.Pro.ACCOUNT_NAME, date]);
    }
    totalBalance += localValue; //compute your overall Coinbase Pro value (in base currency) just for demo purposes, not using here
  }
  
  if (rows.length > 0){
    _insertPriceHistoryRows(rows)
  }
  if (VERBOSE){ Logger.log(`${fn} ${counter++} end`);}
}


function _insertPriceHistoryRows(rows){
  // write latest price data into the Google sheet
  if (!rows || rows.length === 0) return;

  const formats = [];
  const numCols = rows[0].length;
  //generate appropriate cell formatting to accompany our data entry
  for (let r of rows){
    formats.push(_getRowFormatPriceHistory());
  }
  //insert new top rows into price history sheet with new info
  const sheet = SpreadsheetApp.getActiveSpreadsheet().getSheetByName(SHEET_PRICE_HISTORY);// call
  sheet.insertRows(2, rows.length);//shift all rows down the necessary amount to insert at the top
  sheet.getRange(2,1,rows.length,numCols).setValues(rows).setNumberFormats(formats),{size:9};
  if (VERBOSE){ Logger.log(`Wrote prices to sheet`);}
}


function _getRowFormatPriceHistory(){
  return [FORMAT_DATE, "@", FORMAT_CURRENCY_BLACK,"@", FORMAT_DATE];
}


/* schedule a function to run automatically in Google Apps Script cloud - this will auto-update your sheet */ 
function setupTimeDrivenTriggers() { 
  ScriptApp.newTrigger('lookupStaticList').timeBased().everyHours(12).create();  //TODO update this with the name of the function you want to autorun!
}


function lookupStaticList(){
  const myList = ["ETH-USD","LINK-USD"]; // a sample hardcoded list, feel free to change and use this function
  const rows = [];
  const date = new Date();
  for (let currency of myList){
    const [price,time] = _getLatestMarketPrice(currency);
    rows.push([time, currency, price, COINBASE_CONFIG.Pro.ACCOUNT_NAME, date]);
  }
  if (rows.length > 0){
    _insertPriceHistoryRows(rows)
  }
}